#include <iostream>
#include <string>
using namespace std;
#include <list>

class Resource
{
    int value;
    public:
        Resource()
        {
            value = 0;
        }

        void reset()
        {
            value = 0;
        }

        int getValue()
        {
            return value;
        }

        void setValue(int number) //cambia el valor de value
        {
            value = number;
        }
};

/* Tenemos en cuenta que esta clase es un singleton */
class ObjectPool
{
    private:
        list<Resource*> resources;
        static ObjectPool* instance;
        ObjectPool() {}

    public:
        /**
         * Static method for accessing class instance.
         * Part of Singleton design pattern.
         */
        static ObjectPool* getInstance()
        {
            if (instance == 0)
            {
                instance = new ObjectPool;
            }
            return instance;
        }

        /**
          Devuelve instancia de recurso.
         *
         * Se crearán nuevos recursos si todos los recursos
          fueron utilizados en el momento de la solicitud.
         */
        Resource* getResource()
        {
            if (resources.empty())
            {
                cout << "Creating new." << endl;
                return new Resource;
            }
            else
            {
                cout << "Reusing existing." <<endl;
                Resource* resource = resources.front(); //devuelve una referencia directa
                resources.pop_front();//remueve el primer elemento, reduce el tamaño
                return resource;

            }

        }

        /**
         * Devolvemos resource a pool.
         * El recurso debe ser inicializado de nuevo a
         * la configuración por defecto antes que otra persona
         * Intenta usarlo.
         */
        void returnResource(Resource* object)
        {
            object->reset();
            resources.push_back(object);
        }
};

ObjectPool* ObjectPool::instance = 0;


int main()
{
    ObjectPool* pool = ObjectPool::getInstance();
    Resource* one;
    Resource* two;

    /* Resources will be created. */
    one = pool->getResource();
    one->setValue(30);
    cout << "one = " << one->getValue() << " [" << one << "]" << endl;

    two = pool->getResource();
    two->setValue(20);
    cout << "two = " << two->getValue() << " [" << two << "]" << endl;

    pool->returnResource(one);
    pool->returnResource(two);

    /**Los recursos serán reutilizados.
     * Tengamos en cuenta que el valor de ambos recursos se restableció a cero.
     * /
     */
    one = pool->getResource();
    cout << "one HHHHH = " << one->getValue() << " [" << one << "]" << endl;

    two = pool->getResource();
    cout << "two = " << two->getValue() << " [" << two << "]" << endl;

    return 0;
}
